<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wupol.myopia.business.core.screening.flow.domain.mapper.VisionScreeningResultMapper">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="com.wupol.myopia.business.core.screening.flow.domain.model.VisionScreeningResult">
        <result typeHandler="com.baomidou.mybatisplus.extension.handlers.JacksonTypeHandler" column="vision_data" property="visionData"/>
        <result typeHandler="com.baomidou.mybatisplus.extension.handlers.JacksonTypeHandler" column="computer_optometry" property="computerOptometry"/>
        <result typeHandler="com.baomidou.mybatisplus.extension.handlers.JacksonTypeHandler" column="biometric_data" property="biometricData"/>
        <result typeHandler="com.baomidou.mybatisplus.extension.handlers.JacksonTypeHandler" column="other_eye_diseases" property="otherEyeDiseases"/>
        <result typeHandler="com.baomidou.mybatisplus.extension.handlers.JacksonTypeHandler" column="ocular_inspection_data" property="ocularInspectionData"/>
        <result typeHandler="com.baomidou.mybatisplus.extension.handlers.JacksonTypeHandler" column="eye_pressure_data" property="eyePressureData"/>
        <result typeHandler="com.baomidou.mybatisplus.extension.handlers.JacksonTypeHandler" column="fundus_data" property="fundusData"/>
        <result typeHandler="com.baomidou.mybatisplus.extension.handlers.JacksonTypeHandler" column="slit_lamp_data" property="slitLampData"/>
        <result typeHandler="com.baomidou.mybatisplus.extension.handlers.JacksonTypeHandler" column="pupil_optometry_data" property="pupilOptometryData"/>
        <result typeHandler="com.baomidou.mybatisplus.extension.handlers.JacksonTypeHandler" column="visual_loss_level_data" property="visualLossLevelData"/>
        <result typeHandler="com.baomidou.mybatisplus.extension.handlers.JacksonTypeHandler" column="height_and_weight_data" property="heightAndWeightData"/>
        <result typeHandler="com.baomidou.mybatisplus.extension.handlers.JacksonTypeHandler" column="saprodontia_data" property="saprodontiaData"/>
        <result typeHandler="com.baomidou.mybatisplus.extension.handlers.JacksonTypeHandler" column="spine_data" property="spineData"/>
        <result typeHandler="com.baomidou.mybatisplus.extension.handlers.JacksonTypeHandler" column="blood_pressure_data" property="bloodPressureData"/>
        <result typeHandler="com.baomidou.mybatisplus.extension.handlers.JacksonTypeHandler" column="diseases_history_data" property="diseasesHistoryData"/>
        <result typeHandler="com.baomidou.mybatisplus.extension.handlers.JacksonTypeHandler" column="privacy_data" property="privacyData"/>
        <result typeHandler="com.baomidou.mybatisplus.extension.handlers.JacksonTypeHandler" column="deviation_data" property="deviationData"/>
    </resultMap>


    <!-- 通用查询条件 -->
    <sql id="Base_Where_Clause">
        <where>
            <trim prefixOverrides="and">
                <if test="@Ognl@isNotEmpty(id)">and `id` = #{id}</if>
                <if test="@Ognl@isNotEmpty(taskId)">and `task_id` = #{taskId}</if>
                <if test="@Ognl@isNotEmpty(planId)">and `plan_id` = #{planId}</if>
                <if test="@Ognl@isNotEmpty(screeningOrgId)">and `screening_org_id` = #{screeningOrgId}</if>
                <if test="@Ognl@isNotEmpty(createUserId)">and `create_user_id` = #{createUserId}</if>
                <if test="@Ognl@isNotEmpty(districtId)">and `district_id` = #{districtId}</if>
                <if test="@Ognl@isNotEmpty(schoolId)">and `school_id` = #{schoolId}</if>
                <if test="@Ognl@isNotEmpty(studentId)">and `student_id` = #{studentId}</if>
                <if test="@Ognl@isNotEmpty(visionData)">and `vision_data` = #{visionData}</if>
                <if test="@Ognl@isNotEmpty(computerOptometry)">and `computer_optometry` = #{computerOptometry}</if>
                <if test="@Ognl@isNotEmpty(biometricData)">and `biometric_data` = #{biometricData}</if>
                <if test="@Ognl@isNotEmpty(otherEyeDiseasesDTO)">and `other_eye_diseases` = #{otherEyeDiseasesDTO}</if>
                <if test="@Ognl@isNotEmpty(isDoubleScreen)">and `is_double_screen` = #{isDoubleScreen}</if>
                <if test="@Ognl@isNotEmpty(updateTime)">and `update_time` = #{updateTime}</if>
                <if test="@Ognl@isNotEmpty(createTime)">and `create_time` = #{createTime}</if>
            </trim>
        </where>
    </sql>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        id,screening_plan_school_student_id, task_id, student_id, create_user_id, screening_org_id, school_id, plan_id, district_id, vision_data,computer_optometry, biometric_data,  other_eye_diseases, is_double_screen, update_time, create_time,
        ocular_inspection_data, eye_pressure_data, fundus_data, slit_lamp_data, pupil_optometry_data, visual_loss_level_data, systemic_disease_symptom, height_and_weight_data, saprodontia_data, spine_data, blood_pressure_data, diseases_history_data, privacy_data, deviation_data, screening_type
    </sql>

    <select id="getSchoolIdByTaskId" resultType="java.lang.Integer">
        SELECT school_id
        FROM m_vision_screening_result
        WHERE task_id = #{taskId}
          and screening_org_id = #{orgId}
        GROUP BY school_id
    </select>

    <select id="getCreateUserIdByPlanIdAndOrgId" resultType="java.lang.Integer">
        SELECT create_user_id
        FROM m_vision_screening_result
        WHERE plan_id = #{planId}
          and screening_org_id = #{orgId}
        GROUP BY create_user_id
    </select>

    <select id="countScreeningTime"
            resultType="com.wupol.myopia.business.core.screening.flow.domain.dto.StudentScreeningCountDTO">
        select count(1) as count, student_id
        from m_vision_screening_result
        where is_double_screen = 0
        group by student_id
    </select>

    <select id="getLatestResultByStudentId" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from m_vision_screening_result
        where student_id = #{studentId}
          and is_double_screen = 0
        order by create_time desc
        limit 1
    </select>

    <select id="getHaveSrcScreeningNoticePlanIdsByTime" resultType="java.lang.Integer">
        SELECT DISTINCT plan_id
        FROM m_vision_screening_result
        WHERE DATE(update_time) BETWEEN DATE(#{startTime}) AND DATE(#{endTime})
    </select>

    <select id="getBySchoolIdAndOrgIdAndPlanId" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from m_vision_screening_result
        where school_id = #{schoolId}
          and screening_org_id = #{orgId}
          and plan_id = #{planId}
          and is_double_screen = 0
    </select>

    <select id="getByStudentId" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from m_vision_screening_result
        where student_id = #{studentId}
        group by update_time
        order by update_time desc
    </select>

    <select id="getByStudentIdWithPage" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from m_vision_screening_result
        where student_id = #{studentId}
        group by update_time
        order by update_time desc
    </select>

    <select id="getStudentResults" resultMap="BaseResultMap">
        select mvsr.*
        from m_vision_screening_result mvsr
                     left join m_stat_conclusion msc on mvsr.id = msc.result_id
        where msc.is_valid = 1
          and mvsr.is_double_screen = 0
          and mvsr.is_notice = false
          and mvsr.update_time &lt;= CURDATE()
    </select>

    <select id="getByPlanStudentId" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from m_vision_screening_result
        where screening_plan_school_student_id = #{planStudentId}
          and is_double_screen = 0
    </select>

    <select id="getByPlanStudentIds" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from m_vision_screening_result where screening_plan_school_student_id in
        <foreach collection="planStudentIds" item="planStudentId" index="index" open="(" close=")" separator=",">
            #{planStudentId}
        </foreach>
    </select>

    <select id="getIsDoubleScreeningResult" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from m_vision_screening_result where is_double_screen =  #{isDoubleScreen} and screening_plan_school_student_id =  #{screeningPlanSchoolStudentId} and plan_id in
        <foreach collection="planIds" item="planId" index="index" open="(" close=")" separator=",">
            #{planId}
        </foreach>
    </select>

    <select id="getBySchoolIdPlanId" resultType="java.lang.Integer">
        select school_id
        from m_vision_screening_result
        where plan_id = #{planId}
        group by school_id
    </select>

    <select id="getByStudentIdsAndPlanId" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from m_vision_screening_result
        where plan_id = #{planId} and screening_plan_school_student_id in
        <foreach collection="studentIds" item="studentId" index="index" open="(" close=")" separator=",">
             #{studentId}
        </foreach>
        and is_double_screen = #{isDoubleScreen}
    </select>

    <select id="getByPlanIdAndSchoolId" resultMap="BaseResultMap">
        select *
        from m_vision_screening_result
        where plan_id = #{planId}
          and school_id = #{schoolId}
    </select>

    <select id="getLatestByPlanStudentIds" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from m_vision_screening_result where screening_plan_school_student_id in
        <foreach collection="planStudentIds" item="planStudentId" index="index" open="(" close=")" separator=",">
            #{planStudentId}
        </foreach>
        order by create_time desc
        limit 1
    </select>

    <select id="getByPlanId" resultMap="BaseResultMap">
        select *
        from m_vision_screening_result
        where plan_id = #{planId}
    </select>

    <select id="getByStudentIds" resultMap="BaseResultMap">
        select *
        from m_vision_screening_result
                where student_id in
        <foreach collection="studentIds" item="studentId" index="index" open="(" close=")" separator=",">
            #{studentId}
        </foreach>
    </select>

    <select id="selectScreeningResultByDistrictIdAndTaskId" resultType="java.lang.Integer">
        select
            count(*)
        from
            m_vision_screening_result
        where
            task_id in
        <foreach collection="taskIds" item="taskId" index="index" open="(" close=")" separator=",">
            #{taskId}
        </foreach>
        and
            district_id in
        <foreach collection="districtIds" item="districtId" index="index" open="(" close=")" separator=",">
            #{districtId}
        </foreach>
        and
            is_double_screen = 0
    </select>


    <select id="getIsDoubleScreen" resultMap="BaseResultMap">
        select *
        from m_vision_screening_result
        where screening_plan_school_student_id = #{screeningPlanSchoolStudentId}
        and plan_id = #{planId}
        and screening_type = #{screeningType}
        and is_double_screen = 1
    </select>

    <select id="getRescreenBySchoolIds" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from m_vision_screening_result where plan_id = #{planId}
                                         and school_id in
        <foreach collection="schoolIds" item="schoolId" index="index" open="(" close=")" separator=",">
            #{schoolId}
        </foreach>
        and is_double_screen = true
    </select>

    <select id="getFirstByPlanStudentIds" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from m_vision_screening_result where screening_plan_school_student_id in
        <foreach collection="planStudentIds" item="planStudentId" index="index" open="(" close=")" separator=",">
            #{planStudentId}
        </foreach>
        and is_double_screen = 0
    </select>

    <select id="getByIds" resultMap="BaseResultMap">
        select *
        from m_vision_screening_result where id in
        <foreach collection="ids" item="id" index="index" open="(" close=")" separator=",">
            #{id}
        </foreach>
        order by create_time desc
    </select>
</mapper>
