<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wupol.myopia.business.core.screening.flow.domain.mapper.ScreeningPlanSchoolMapper">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="com.wupol.myopia.business.core.screening.flow.domain.model.ScreeningPlanSchool">
    </resultMap>
    <resultMap id="VoResultMap" type="com.wupol.myopia.business.core.screening.flow.domain.dto.ScreeningPlanSchoolDTO">
    </resultMap>

    <!-- 通用查询条件 -->
    <sql id="Base_Where_Clause">
        <where>
            <trim prefixOverrides="and">
                <if test="@Ognl@isNotEmpty(id)">and `id` = #{id}</if>
                <if test="@Ognl@isNotEmpty(screeningPlanId)">and `screening_plan_id` = #{screeningPlanId}</if>
                <if test="@Ognl@isNotEmpty(screeningOrgId)">and `screening_org_id` = #{screeningOrgId}</if>
                <if test="@Ognl@isNotEmpty(schoolId)">and `school_id` = #{schoolId}</if>
                <if test="@Ognl@isNotEmpty(schoolName)">and `school_name` = #{schoolName}</if>
                <if test="@Ognl@isNotEmpty(qualityControllerName)">and `quality_controller_name` = #{qualityControllerName}</if>
                <if test="@Ognl@isNotEmpty(qualityControllerCommander)">and `quality_controller_commander` = #{qualityControllerCommander}</if>
                <if test="@Ognl@isNotEmpty(createTime)">and `create_time` = #{createTime}</if>
            </trim>
        </where>
    </sql>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        id, screening_plan_id, screening_org_id, school_id, school_name, quality_controller_name, quality_controller_commander, create_time
    </sql>

    <select id="countScreeningTime" resultType="com.wupol.myopia.business.core.screening.flow.domain.dto.SchoolScreeningCountDTO">
        select count(1) as count, school_id
        from m_screening_plan_school
        group by school_id
    </select>

    <select id="selectVoListByPlanId" resultMap="VoResultMap" parameterType="java.util.Map">
        SELECT
        <include refid="Base_Column_List"/>
        FROM m_screening_plan_school
                WHERE screening_plan_id = #{screeningPlanId}
        <if test="schoolName != null and schoolName != ''">
            and school_name like CONCAT('%', #{schoolName}, '%')
        </if>
    </select>

    <select id="selectHasPlanInPeriod" resultMap="BaseResultMap" parameterType="java.util.Map">
        SELECT
        msps.*
        FROM m_screening_plan_school msps
        LEFT JOIN m_screening_plan msp ON msps.screening_plan_id = msp.id
        <where>
            <trim prefixOverrides="and">
                AND msp.release_status = 1
                <if test="param.districtIds != null and param.districtIds.size() != 0">
                    and msp.`district_id` in
                    <foreach collection="param.districtIds" item="id" index="index" open="(" close=")" separator=",">
                        #{id}
                    </foreach>
                </if>
                <if test="@Ognl@isNotEmpty(param.screeningOrgId)">and msp.`screening_org_id` = #{param.screeningOrgId}</if>
                <if test="@Ognl@isNotEmpty(param.excludedScreeningPlanId)">and msp.`id` != #{param.excludedScreeningPlanId}</if>
                <if test="param.startCreateTime != null and param.endCreateTime != null">
                    and <![CDATA[ DATE(msp.`start_time`) < DATE(#{param.endCreateTime})]]> and <![CDATA[ DATE(msp.`end_time`) >= DATE(#{param.startCreateTime})]]>
                </if>
                <if test="@Ognl@isNotEmpty(param.screeningType)">
                  and msp.screening_type = #{param.screeningType}
                </if>
            </trim>
        </where>
    </select>

    <select id="countBySchoolId" resultMap="BaseResultMap">
        select *
        from m_screening_plan_school msps
                     left join m_screening_plan msp on msp.id = msps.screening_plan_id
        where msps.school_id = #{schoolId}
          and msp.release_status = 1
<!--          and msps.create_time &lt;= CURDATE()-->
    </select>

    <update id="updateSchoolNameBySchoolId">
        update m_screening_plan_school
        set school_name = #{schoolName}
        where school_id = #{schoolId}
    </update>

    <select id="getBySchoolId" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from m_screening_plan_school
        where school_id = #{schoolId}
        order by create_time desc
    </select>

    <select id="getOneByPlanIdAndSchoolId" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from m_screening_plan_school
        where screening_plan_id = #{planId}
          and school_id = #{schoolId}
        limit 1
    </select>

    <select id="getByPlanId" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from m_screening_plan_school
        where screening_plan_id = #{planId}
    </select>

    <delete id="deleteByPlanIdAndExcludeSchoolIds">
        delete
        from m_screening_plan_school where screening_plan_id = #{planId}
        <if test="schoolIds != null and schoolIds.size() != 0">
            and school_id not in
            <foreach collection="schoolIds" open="(" close=")" separator="," item="schoolId">
                #{schoolId}
            </foreach>
        </if>
    </delete>

    <select id="getBySchoolIds" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from m_screening_plan_school where school_id in
        <foreach collection="schoolIds" open="(" close=")" separator="," item="schoolId">
            #{schoolId}
        </foreach>
    </select>

    <select id="getScreeningSchoolsByOrgId" resultMap="BaseResultMap">
        select sps.*
        from m_screening_plan_school sps
        left join m_screening_plan p on p.id = sps.screening_plan_id
        where p.screening_org_id = #{screeningOrgId}
        and p.release_status = #{releaseStatus}
        and <![CDATA[ DATE(p.`start_time`) <= DATE(#{currentDate})]]> and
        <![CDATA[ DATE(p.`end_time`) >= DATE(#{currentDate})]]>
    </select>

    <select id="getByPlanIds" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM m_screening_plan_school
        WHERE screening_plan_id IN
        <foreach collection="screeningPlanIds" item="id" index="index" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </select>

    <select id="getByPlanIdNotInSchoolIds" resultType="java.lang.Integer">
        SELECT school_id
        FROM m_screening_plan_school
                WHERE screening_plan_id = #{screeningPlanId}
                  and school_id not in
        <foreach collection="schoolIds" item="schoolId" index="index" open="(" close=")" separator=",">
            #{schoolId}
        </foreach>
    </select>

    <select id="getCurrentMaxScreeningCode" resultType="java.lang.Long">
        SELECT
               screening_code
        FROM
             m_screening_plan_school_student
        ORDER BY
                 screening_code DESC
        LIMIT 1;
    </select>

    <select id="getReleasePlanSchoolPageBySchoolId"
            resultType="com.wupol.myopia.business.core.screening.flow.domain.dto.ScreeningListResponseDTO">
        select msps.screening_plan_id as planId,
               msps.school_id         as schoolId,
               msps.screening_org_id  as screeningOrgId
        from m_screening_plan_school msps
        left join m_screening_plan msp on msps.screening_plan_id = msp.id
        where msp.screening_type = 0
          and msp.release_status = 1
          and msps.school_id = #{schoolId}
        order by msps.create_time desc
    </select>

    <select id="listByCondition"
            resultType="com.wupol.myopia.business.core.screening.flow.domain.dto.ScreeningListResponseDTO">
        select msps.screening_plan_id as planId,
               msps.school_id         as schoolId,
               msp.screening_org_id   as screeningOrgId,
               msp.screening_org_type  as screeningOrgType
        from (select * from m_screening_plan_school where school_id = #{param.schoolId} ) msps
        left join m_screening_plan msp on msps.screening_plan_id = msp.id
        where 1 = 1
        <if test="@Ognl@isNotEmpty(param.screeningType)">
            and msp.screening_type = #{param.screeningType}
        </if>
        <if test="param.title != null and param.title != ''">
            and msp.title like CONCAT('%', #{param.title}, '%')
        </if>
        <if test="param.screeningOrgIds != null and param.screeningOrgIds.size() != 0">
            and msp.screening_org_id IN
            <foreach collection="param.screeningOrgIds" item="id" index="index" open="(" close=")" separator=",">
                #{id}
            </foreach>
        </if>
        order by msps.create_time desc
    </select>

    <select id="getLastBySchoolIdAndScreeningType" resultMap="BaseResultMap">
        SELECT sps.* FROM m_screening_plan_school sps
        LEFT JOIN m_screening_plan sp ON sp.id = sps.screening_plan_id
        WHERE sp.screening_type = #{screeningType}
          AND sps.school_id = #{schoolId}
        ORDER BY sps.create_time DESC LIMIT 1
    </select>

</mapper>
