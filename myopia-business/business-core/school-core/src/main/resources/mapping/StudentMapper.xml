<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wupol.myopia.business.core.school.domain.mapper.StudentMapper">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="com.wupol.myopia.business.core.school.domain.model.Student">
        <result typeHandler="com.baomidou.mybatisplus.extension.handlers.JacksonTypeHandler" column="family_info" property="familyInfo"/>
    </resultMap>

    <resultMap id="BaseResultMapDTO" type="com.wupol.myopia.business.core.school.domain.dto.StudentDTO">
        <result typeHandler="com.baomidou.mybatisplus.extension.handlers.JacksonTypeHandler" column="family_info" property="familyInfo"/>
    </resultMap>

    <resultMap id="StudentExtraDTOMap" type="com.wupol.myopia.business.core.school.domain.dto.StudentExtraDTO">
    </resultMap>

    <!-- 通用查询条件 -->
    <sql id="Base_Where_Clause">
        <where>
            <trim prefixOverrides="and">
                <if test="@Ognl@isNotEmpty(id)">and `id` = #{id}</if>
                <if test="@Ognl@isNotEmpty(createUserId)">and `create_user_id` = #{createUserId}</if>
                <if test="@Ognl@isNotEmpty(sno)">and `sno` = #{sno}</if>
                <if test="@Ognl@isNotEmpty(gradeId)">and `grade_id` = #{gradeId}</if>
                <if test="@Ognl@isNotEmpty(gradeType)">and `grade_type` = #{gradeType}</if>
                <if test="@Ognl@isNotEmpty(classId)">and `class_id` = #{classId}</if>
                <if test="@Ognl@isNotEmpty(name)">and `name` = #{name}</if>
                <if test="@Ognl@isNotEmpty(gender)">and `gender` = #{gender}</if>
                <if test="@Ognl@isNotEmpty(birthday)">and `birthday` = #{birthday}</if>
                <if test="@Ognl@isNotEmpty(nation)">and `nation` = #{nation}</if>
                <if test="@Ognl@isNotEmpty(idCard)">and `id_card` = #{idCard}</if>
                <if test="@Ognl@isNotEmpty(parentPhone)">and `parent_phone` = #{parentPhone}</if>
                <if test="@Ognl@isNotEmpty(mpParentPhone)">and `mp_parent_phone` = #{mpParentPhone}</if>
                <if test="@Ognl@isNotEmpty(provinceCode)">and `province_code` = #{provinceCode}</if>
                <if test="@Ognl@isNotEmpty(cityCode)">and `city_code` = #{cityCode}</if>
                <if test="@Ognl@isNotEmpty(areaCode)">and `area_code` = #{areaCode}</if>
                <if test="@Ognl@isNotEmpty(townCode)">and `town_code` = #{townCode}</if>
                <if test="@Ognl@isNotEmpty(address)">and `address` = #{address}</if>
                <if test="@Ognl@isNotEmpty(avatarFileId)">and `avatar_file_id` = #{avatarFileId}</if>
                <if test="@Ognl@isNotEmpty(currentSituation)">and `current_situation` = #{currentSituation}</if>
                <if test="@Ognl@isNotEmpty(visionLabel)">and `vision_label` = #{visionLabel}</if>
                <if test="@Ognl@isNotEmpty(lastScreeningTime)">and `last_screening_time` = #{lastScreeningTime}</if>
                <if test="@Ognl@isNotEmpty(remark)">and `remark` = #{remark}</if>
                <if test="@Ognl@isNotEmpty(status)">and `status` = #{status}</if>
                <if test="@Ognl@isNotEmpty(glassesType)">and `glassesType` = #{status}</if>
                <if test="@Ognl@isNotEmpty(isMyopia)">and `isMyopia` = #{status}</if>
                <if test="@Ognl@isNotEmpty(isHyperopia)">and `isHyperopia` = #{status}</if>
                <if test="@Ognl@isNotEmpty(isAstigmatism)">and `isAstigmatism` = #{status}</if>
                <if test="@Ognl@isNotEmpty(createTime)">and `create_time` = #{createTime}</if>
                <if test="@Ognl@isNotEmpty(updateTime)">and `update_time` = #{updateTime}</if>
                <if test="@Ognl@isNotEmpty(schoolId)">and `school_id` = #{schoolId}</if>
                <if test="@Ognl@isNotEmpty(myopiaLevel)">and `myopia_level` = #{myopiaLevel}</if>
                <if test="@Ognl@isNotEmpty(hyperopiaLevel)">and `hyperopia_level` = #{hyperopiaLevel}</if>
                <if test="@Ognl@isNotEmpty(astigmatismLevel)">and `astigmatism_level` = #{astigmatismLevel}</if>

                <!-- 模糊查询 -->
                <if test="nameLike != null">and `name` like CONCAT("%",#{nameLike},"%")</if>
                <if test="idCardLike != null">and id_card like CONCAT("%",#{idCardLike},"%")</if>
                <if test="snoLike != null">and sno like CONCAT("%",#{snoLike},"%")</if>
                <if test="phoneLike != null">and parent_phone like CONCAT("%",#{phoneLike},"%")</if>
                <if test="gradeList != null">and grade_id in
                    <foreach collection="gradeList" open="(" close=")" separator="," item="item">#{item}</foreach>
                </if>
                <if test="idCardList != null">and id_card in
                    <foreach collection="idCardList" open="(" close=")" separator="," item="item">#{item}</foreach>
                </if>
            </trim>
        </where>
    </sql>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        id, create_user_id, sno, grade_id, grade_type, class_id, name, gender, birthday, nation, id_card, parent_phone, mp_parent_phone, province_code, city_code, area_code, town_code,
        address, avatar_file_id, current_situation, vision_label, last_screening_time, remark, status, glasses_type,is_myopia,is_hyperopia,is_astigmatism,create_time, update_time,school_id,
        myopia_level, hyperopia_level, astigmatism_level,is_newborn_without_id_card,family_info,committee_code,record_no
    </sql>

    <select id="getStudentListByCondition" resultMap="BaseResultMapDTO">
        select ms.*,
               school.name as schoolName,
               school.id   as schoolId,
               msg.name    as gradeName,
               msc.name    as className
        from m_student ms
                     left join
                     m_school school
                             on ms.school_id = school.id
                     left join
                     m_school_grade msg
                             on ms.grade_id = msg.id
                     left join
                     m_school_class msc
                             on ms.class_id = msc.id
                where ms.status != 2
        <if test="sno != null and sno != ''">
            and ms.sno like CONCAT('%', #{sno}, '%')
        </if>
        <if test="idCard != null and idCard != ''">
            and ms.id_card like CONCAT('%', #{idCard}, '%')
        </if>
        <if test="name != null and name != ''">
            and ms.name like CONCAT('%', #{name}, '%')
        </if>
        <if test="parentPhone != null and parentPhone != ''">
            and ms.mp_parent_phone like CONCAT('%', #{parentPhone}, '%')
        </if>
        <if test="gender != null">
            and ms.gender = #{gender}
        </if>
        <if test="schoolId != null">
            and ms.school_id = #{schoolId}
        </if>
        <if test="gradeId != null">
            and ms.grade_id = #{gradeId}
        </if>
        <if test="classId != null">
            and ms.class_id = #{classId}
        </if>
        <if test="gradeIds != null and gradeIds.size() != 0">
            and ms.grade_id in
            <foreach collection="gradeIds" item="id" index="index" open="(" close=")" separator=",">
                #{id}
            </foreach>
        </if>
        <if test="visionLabels != null and visionLabels.size() != 0">
            and ms.vision_label in
            <foreach collection="visionLabels" item="id" index="index" open="(" close=")" separator=",">
                #{id}
            </foreach>
        </if>
        <if test="startScreeningTime != null">
            and ms.last_screening_time between #{startScreeningTime} and #{endScreeningTime}
        </if>
        <if test="schoolName != null and schoolName != ''">
            and school.name like CONCAT('%', #{schoolName}, '%')
        </if>
        order by ms.create_time desc
    </select>

    <select id="getByQuery" resultMap="BaseResultMap">
        select *
        from m_student
        <include refid="Base_Where_Clause" />
    </select>

    <select id="getByPage" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from m_student
        <include refid="Base_Where_Clause"/>
    </select>

    <select id="getStudentById" resultMap="BaseResultMapDTO">
        select
        <include refid="Base_Column_List"/>
        from m_student ms
        where ms.id = #{id}
    </select>

    <select id="getByOtherId" resultMap="BaseResultMapDTO">
        select student.*
        from m_student student
                     left join m_school school on student.school_id = school.id
                where student.status != 2
        <if test="schoolId != null">
            and school.id = #{schoolId}
        </if>
        <if test="classId != null">
            and student.class_id = #{classId}
        </if>
        <if test="gradeId != null">
            and student.grade_id = #{gradeId}
        </if>
    </select>

    <select id="countStudentBySchoolId" resultType="com.wupol.myopia.business.core.school.domain.dto.StudentCountDTO">
        select count(1) as count, school_id
        from m_student
        where status = 0
        group by school_id
    </select>

    <select id="getByIdCard" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from m_student
        where id_card = #{idCard}
          and status = 0
    </select>

    <select id="getByIdCardAndName" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from m_student
        where id_card = #{idCard}
          and name = #{name}
    </select>

    <select id="getByIdsAndName" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from m_student where
                id in
        <foreach collection="ids" item="id" index="index" open="(" close=")" separator=",">
            #{id}
        </foreach>
        <if test="name != null and name != ''">
            and name like CONCAT('%', #{name}, '%')
        </if>
    </select>

    <select id="getByGradeIdAndStatus" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from m_student
        where grade_id = #{gradeId}
          and status = #{status}
    </select>

    <select id="getByClassIdAndStatus" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from m_student
        where class_id = #{classId}
          and status = #{status}
    </select>

    <select id="getByIdCardNeIdAndStatus" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from m_student where id_card = #{cardId}
        <if test="id != null">
            and id != #{id}
        </if>
        and status = #{status}
    </select>

    <select id="getByIdCardsAndStatus" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from m_student where id_card in
        <foreach collection="idCards" item="idCard" index="index" open="(" close=")" separator=",">
            #{idCard}
        </foreach>
        and status = #{status}
    </select>

    <select id="selectBySchoolDistrictIds" resultMap="StudentExtraDTOMap">
        select mst.id, mst.vision_label, msc.district_id
        from m_student mst
        left join m_school msc on mst.school_id = msc.id
        where msc.district_id in
        <foreach collection="districtIds" item="districtId" index="index" open="(" close=")" separator=",">
          #{districtId}
        </foreach>
    </select>

    <select id="countParentStudent" resultType="com.wupol.myopia.business.core.school.domain.dto.ParentStudentDTO">
        select id, name, gender, avatar_file_id from m_student
        where id in
        <foreach collection="studentIds" item="studentId" index="index" open="(" close=")" separator=",">
            #{studentId}
        </foreach>
    </select>

    <select id="getStudentInfo" resultMap="BaseResultMapDTO">
        select student.*,
        school.name as schoolName,
        school.district_detail as schoolDistrictName,
        msc.name as className,
        msg.name as gradeName
        from m_student student
        left join m_school school on student.school_id = school.id
        left join m_school_class msc on student.class_id = msc.id
        left join m_school_grade msg on student.grade_id = msg.id
        where student.id = #{studentId}
    </select>

    <select id="getStudentInfoList" resultMap="BaseResultMapDTO">
        select student.*,
        school.name as schoolName,
        school.district_detail as schoolDistrictName,
        msc.name as className,
        msg.name as gradeName
        from m_student student
        left join m_school school on student.school_id = school.id
        left join m_school_class msc on student.class_id = msc.id
        left join m_school_grade msg on student.grade_id = msg.id
        where student.id in
        <foreach collection="studentIds" open="(" close=")" separator="," item="studentId">
            #{studentId}
        </foreach>
    </select>

    <select id="getDeleteStudentByIdCard" resultMap="BaseResultMap">
        select *
        from m_student where status = 2
                         and id_card in
        <foreach collection="idCards" open="(" close=")" separator="," item="idCard">
            #{idCard}
        </foreach>
    </select>

    <select id="getByCommitteeCode" resultMap="BaseResultMap">
        select *
        from m_student
        where committee_code = #{committeeCode};
    </select>


    <select id="getOneByCommitteeCode" resultMap="BaseResultMap">
        select *
        from m_student
        where committee_code = #{committeeCode}
        order by record_no desc
        limit 1
    </select>

    <select id="getAllByIdCard" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from m_student
        where id_card = #{idCard}
    </select>

    <select id="checkIdCardAndId" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from m_student
        where id_card = #{cardId}
          and id != #{id}
    </select>

    <select id="getByCondition" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from m_student
        where (id_card = #{condition}
                or sno = #{condition})
          and name = #{name}
        order by create_time desc
        limit 1
    </select>
</mapper>
