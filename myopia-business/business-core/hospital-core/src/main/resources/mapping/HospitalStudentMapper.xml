<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wupol.myopia.business.core.hospital.domain.mapper.HospitalStudentMapper">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="com.wupol.myopia.business.core.hospital.domain.model.HospitalStudent">
        <result typeHandler="com.baomidou.mybatisplus.extension.handlers.JacksonTypeHandler" column="family_info" property="familyInfo"/>
    </resultMap>

    <resultMap id="HospitalStudentDO" type="com.wupol.myopia.business.core.hospital.domain.dos.HospitalStudentDO">
        <result typeHandler="com.baomidou.mybatisplus.extension.handlers.JacksonTypeHandler" column="family_info" property="familyInfo"/>
    </resultMap>

    <resultMap id="HospitalStudentMap" type="com.wupol.myopia.business.core.hospital.domain.dto.HospitalStudentResponseDTO">
        <result typeHandler="com.baomidou.mybatisplus.extension.handlers.JacksonTypeHandler" column="family_info" property="familyInfo"/>
    </resultMap>

    <!-- 通用查询条件 -->
    <sql id="Base_Where_Clause">
        <where>
            <trim prefixOverrides="and">
                <if test="@Ognl@isNotEmpty(id)">and hs.`id` = #{id}</if>
                <if test="@Ognl@isNotEmpty(studentId)">and hs.`student_id` = #{studentId}</if>
                <if test="@Ognl@isNotEmpty(hospitalId)">and hs.`hospital_id` = #{hospitalId}</if>
                <if test="@Ognl@isNotEmpty(sno)">and hs.`sno` = #{sno}</if>
                <if test="@Ognl@isNotEmpty(schoolId)">and  hs.`school_id` = #{schoolId}</if>
                <if test="@Ognl@isNotEmpty(gradeId)">and  hs.`grade_id` = #{gradeId}</if>
                <if test="@Ognl@isNotEmpty(classId)">and  hs.`class_id` = #{classId}</if>
                <if test="@Ognl@isNotEmpty(name)">and  hs.`name` = #{name}</if>
                <if test="@Ognl@isNotEmpty(gender)">and  hs.`gender` = #{gender}</if>
                <if test="@Ognl@isNotEmpty(birthday)">and  hs.`birthday` = #{birthday}</if>
                <if test="@Ognl@isNotEmpty(nation)">and  hs.`nation` = #{nation}</if>
                <if test="@Ognl@isNotEmpty(idCard)">and  hs.`id_card` = #{idCard}</if>
                <if test="@Ognl@isNotEmpty(status)">and  hs.`status` = #{status}</if>
                <if test="@Ognl@isNotEmpty(createTime)">and hs.`create_time` = #{createTime}</if>
                <if test="@Ognl@isNotEmpty(startDate)">
                    and DATE(hs.`create_time`) &gt;= Date(#{startDate})
                </if>
                <if test="@Ognl@isNotEmpty(endDate)">
                    and DATE(hs.`create_time`) &lt;= Date(#{endDate})
                </if>
                <if test="@Ognl@isNotEmpty(studentIdList)">
                    AND hs.`student_id` in <foreach collection="studentIdList" item="item" open="(" close=")" separator=",">#{item}</foreach>
                </if>

                <!-- 模糊查询 -->
                <if test="nameLike != null">and hs.`name` like CONCAT("%",#{nameLike},"%")</if>
            </trim>

        </where>
    </sql>

    <select id="getBy" resultMap="BaseResultMap">
        select *
        from h_hospital_student hs
        <include refid="Base_Where_Clause" />
    </select>

    <select id="getByPage" resultMap="BaseResultMap">
        select *
        from h_hospital_student hs
        <include refid="Base_Where_Clause"/>
    </select>

    <select id="getHospitalStudentDoList" resultMap="HospitalStudentDO">
        SELECT hs.*, count(mr.student_id) as numOfVisits, max(mr.create_time) as lastVisitDate
        FROM h_hospital_student hs
        LEFT JOIN h_medical_report mr ON hs.student_id = mr.student_id and hs.hospital_id = mr.hospital_id
        <include refid="Base_Where_Clause"/>
        group by hs.student_id
        order by create_time desc
    </select>

    <select id="getByList" resultMap="HospitalStudentMap">
        select *
        from h_hospital_student where hospital_id = #{requestDTO.hospitalId}
        <if test="requestDTO.name != null and requestDTO.name != ''">
            and name like CONCAT('%', #{requestDTO.name}, '%')
        </if>
        and status = 0
        order by create_time desc
    </select>

    <update id="deletedById">
        update h_hospital_student
        set status = 2
        where id = #{id}
    </update>

    <select id="getByHospitalStudentId" resultMap="HospitalStudentMap">
        select *
        from h_hospital_student
        where id = #{id};
    </select>

    <select id="getByStudentId" resultMap="BaseResultMap">
        select *
        from h_hospital_student
        where student_id = #{studentId}
    </select>

    <select id="getByHospitalIdAndStudentId" resultMap="HospitalStudentMap">
        select *
        from h_hospital_student
        where hospital_id = #{hospitalId}
        and student_id = #{studentId}
    </select>


    <select id="getPreschoolByStudentType" resultMap="BaseResultMap">
        select *
        from (select *
              from h_hospital_student
              where status = 0
                and (student_type = 2 or student_type = 3)
              order by create_time desc) as tmp
        group by tmp.student_id
    </select>
</mapper>
