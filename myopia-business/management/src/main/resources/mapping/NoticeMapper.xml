<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wupol.myopia.business.management.domain.mapper.NoticeMapper">
    <resultMap id="BaseResultMap" type="com.wupol.myopia.business.management.domain.model.Notice">
        <!--@mbg.generated-->
        <!--@Table m_notice-->
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="create_user_id" jdbcType="INTEGER" property="createUserId"/>
        <result column="link_id" jdbcType="INTEGER" property="linkId"/>
        <result column="notice_user_id" jdbcType="INTEGER" property="noticeUserId"/>
        <result column="type" jdbcType="TINYINT" property="type"/>
        <result column="status" jdbcType="TINYINT" property="status"/>
        <result column="title" jdbcType="VARCHAR" property="title"/>
        <result column="content" jdbcType="VARCHAR" property="content"/>
        <result column="file_id" jdbcType="VARCHAR" property="fileId"/>
        <result column="download_url" jdbcType="VARCHAR" property="downloadUrl"/>
        <result column="start_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="end_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
    </resultMap>

    <sql id="Base_Where_Clause">
        <where>
            <trim prefixOverrides="and">
                <if test="@Ognl@isNotEmpty(id)">and `id` = #{id}</if>
                <if test="@Ognl@isNotEmpty(createUserId)">and `create_user_id` = #{createUserId}</if>
                <if test="@Ognl@isNotEmpty(linkId)">and `link_id` = #{linkId}</if>
                <if test="@Ognl@isNotEmpty(noticeUserId)">and `notice_user_id` = #{noticeUserId}</if>
                <if test="@Ognl@isNotEmpty(type)">and `type` = #{type}</if>
                <if test="@Ognl@isNotEmpty(status)">and `status` = #{status}</if>
                <if test="@Ognl@isNotEmpty(title)">and `title` = #{title}</if>
                <if test="@Ognl@isNotEmpty(content)">and `content` = #{content}</if>
                <if test="@Ognl@isNotEmpty(fileId)">and `file_id` = #{fileId}</if>
                <if test="@Ognl@isNotEmpty(downloadUrl)">and `download_url` = #{downloadUrl}</if>
                <if test="@Ognl@isNotEmpty(startTime)">and `start_time` = #{startTime}</if>
                <if test="@Ognl@isNotEmpty(endTime)">and `end_time` = #{endTime}</if>
                <if test="@Ognl@isNotEmpty(createTime)">and `create_time` = #{createTime}</if>
                <if test="@Ognl@isNotEmpty(updateTime)">and `update_time` = #{updateTime}</if>
            </trim>
        </where>
    </sql>

    <sql id="Base_Column_List">
        id, create_user_id, link_id, notice_user_id, type, `status`, title, content, file_id, download_url, start_time, end_time, create_time, update_time
    </sql>

    <select id="getByNoticeUserId" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from m_notice mn
        where mn.notice_user_id = #{userId}
          and mn.status != 2
        order by mn.create_time desc
    </select>

    <update id="batchUpdateStatus">
        update m_notice m
        set m.status = #{status}
                where m.id in
        <foreach collection="ids" item="id" index="index" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </update>

    <select id="unreadCount" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from m_notice mn
        where mn.status = #{status}
          and mn.notice_user_id = #{userId}
        order by mn.create_time desc
    </select>

    <update id="updateScreeningNotice">
        update m_notice mn
        set mn.status = 1
        where mn.notice_user_id = #{noticeUserId}
          and mn.link_id = #{linkId};
    </update>

    <insert id="batchCreateScreeningNotice">
        insert into m_notice (create_user_id, link_id, notice_user_id, type, title, content, start_time, end_time) values
        <foreach collection="toUserIds" item="toUserId" index="index" separator=",">
            (#{createUserId}, #{linkId}, #{toUserId}, #{type}, #{title}, #{content}, #{startTime}, #{endTime})
        </foreach>
    </insert>
</mapper>